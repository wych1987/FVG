//@version=6
strategy("FVG Multi-Timeframe Strategy v2", overlay=true, 
         margin_long=100, margin_short=100, pyramiding=1, 
         default_qty_type=strategy.percent_of_equity, default_qty_value=100)

// 策略参数
thresholdPer = input.float(0.5, 'FVG Threshold %', minval=0, maxval=100, step=0.1)
riskRewardRatio = input.float(2.0, 'Risk/Reward Ratio', minval=1.0, step=0.1)
maxTradeDuration = input.int(100, 'Max Trade Duration (bars)', minval=10)
useStoploss = input.bool(true, 'Use Stop Loss/Take Profit')
entryMode = input.string("breakout", "入场模式", options=["breakout", "pullback"])
emaPeriod = input.int(21, 'EMA周期')
maxDailyTrades = input.int(5, '每日最大交易次数', minval=1, maxval=10)
holdHours = input.float(4, '最大持仓小时数', minval=0.1, maxval=72, step=0.5)
showFvgBoxes = input.bool(true, '显示FVG区域')

// 计算EMA
emaValue = ta.ema(close, emaPeriod)
plot(emaValue, "EMA", color=color.blue, linewidth=2)

// FVG数据结构
type FVGData
    int fvgTime
    float fvgLow
    float fvgHigh
    bool isBull
    string tf
    bool traded

// 全局变量
var fvgHistory = array.new<FVGData>()
var tradedFVGs = array.new_int()
var int tradesToday = 0
var int lastTradeDay = na
var float lastEntryPrice = na
var int lastEntryBar = na
var bool inPosition = false

// 获取当前日期（UTC）
curDay = dayofmonth(time('D')) + 100 * month(time('D')) + 10000 * year(time('D'))

// 新的一天重置交易计数
if na(lastTradeDay) or curDay != lastTradeDay
    tradesToday := 0
    lastTradeDay := curDay

// 检测FVG函数（优化版）
detectFVG(tf) =>
    threshold = thresholdPer / 100
    [bull, bear] = request.security(syminfo.tickerid, tf, [low > high[2] and close[1] > high[2] and (low - high[2]) / high[2] > threshold, high < low[2] and close[1] < low[2] and (low[2] - high) / high > threshold], lookahead=barmerge.lookahead_off)
    [fvgTime, fvgLow, fvgHigh] = request.security(syminfo.tickerid, tf, [time[2], bear ? low[2] : low, bull ? high[2] : high], lookahead=barmerge.lookahead_off)
    [bull, bear, fvgTime, fvgLow, fvgHigh]

// 检查FVG是否已存在
fvgExists(arr, t) =>
    if array.size(arr) == 0
        false
    else
        exist = false
        for i = 0 to array.size(arr) - 1
            fvg = array.get(arr, i)
            if fvg.fvgTime == t
                exist := true
        exist

// 假设只用4个周期
tf1 = "60"
tf2 = "240"
tf3 = "D"
tf4 = "W"

[bull1, bear1, fvgTime1, fvgLow1, fvgHigh1] = detectFVG(tf1)
[bull2, bear2, fvgTime2, fvgLow2, fvgHigh2] = detectFVG(tf2)
[bull3, bear3, fvgTime3, fvgLow3, fvgHigh3] = detectFVG(tf3)
[bull4, bear4, fvgTime4, fvgLow4, fvgHigh4] = detectFVG(tf4)

// 然后统一push到fvgHistory
if (bull1 or bear1) and not fvgExists(fvgHistory, fvgTime1)
    fvgData = FVGData.new(fvgTime1, fvgLow1, fvgHigh1, bull1, tf1, false)
    array.push(fvgHistory, fvgData)
if (bull2 or bear2) and not fvgExists(fvgHistory, fvgTime2)
    fvgData = FVGData.new(fvgTime2, fvgLow2, fvgHigh2, bull2, tf2, false)
    array.push(fvgHistory, fvgData)
if (bull3 or bear3) and not fvgExists(fvgHistory, fvgTime3)
    fvgData = FVGData.new(fvgTime3, fvgLow3, fvgHigh3, bull3, tf3, false)
    array.push(fvgHistory, fvgData)
if (bull4 or bear4) and not fvgExists(fvgHistory, fvgTime4)
    fvgData = FVGData.new(fvgTime4, fvgLow4, fvgHigh4, bull4, tf4, false)
    array.push(fvgHistory, fvgData)

// 交易逻辑
if array.size(fvgHistory) > 0 and strategy.position_size == 0 and barstate.isconfirmed and tradesToday < maxDailyTrades
    bool opened = false
    string tradeComment = ""
    color tradeColor = color.green
    string tradeDir = ""
    for i = 0 to array.size(fvgHistory) - 1
        idx = array.size(fvgHistory) - 1 - i
        fvg = array.get(fvgHistory, idx)
        if not fvg.traded
            fvgTime = fvg.fvgTime
            fvgLow = fvg.fvgLow
            fvgHigh = fvg.fvgHigh
            isBull = fvg.isBull
            tfLabel = fvg.tf
            fvgMid = (fvgLow + fvgHigh) / 2
            // 突破模式
            if entryMode == "breakout"
                if isBull and close > fvgHigh
                    strategy.entry("Long", strategy.long)
                    opened := true
                    tradeDir := "Long"
                    tradeComment := "Bull FVG " + tfLabel
                    tradeColor := color.green
                else if not isBull and close < fvgLow
                    strategy.entry("Short", strategy.short)
                    opened := true
                    tradeDir := "Short"
                    tradeComment := "Bear FVG " + tfLabel
                    tradeColor := color.red
            // 回调模式
            else if entryMode == "pullback"
                if isBull and low <= fvgMid and close > fvgMid
                    strategy.entry("Long", strategy.long)
                    opened := true
                    tradeDir := "Long"
                    tradeComment := "Bull FVG Pullback " + tfLabel
                    tradeColor := color.green
                else if not isBull and high >= fvgMid and close < fvgMid
                    strategy.entry("Short", strategy.short)
                    opened := true
                    tradeDir := "Short"
                    tradeComment := "Bear FVG Pullback " + tfLabel
                    tradeColor := color.red
            if opened
                fvg.traded := true
                array.push(tradedFVGs, fvgTime)
                tradesToday := tradesToday + 1
                lastEntryPrice := close
                lastEntryBar := bar_index
                label.new(bar_index, close, "开仓:" + tradeDir + "\n" + str.tostring(close, format.mintick) + "\ntradesToday=" + str.tostring(tradesToday) + "\ncurDay=" + str.tostring(curDay), color=tradeColor, style=tradeDir == "Long" ? label.style_label_up : label.style_label_down, textcolor=color.white, size=size.normal)
                break

// 出场逻辑
if strategy.position_size != 0
    isLong = strategy.position_size > 0
    isShort = strategy.position_size < 0
    barsHeld = bar_index - lastEntryBar
    holdTimeExceeded = barsHeld > holdHours * 60 / timeframe.in_seconds() * 60  // 转换为bar数量
    emaExit = (isLong and close < emaValue) or (isShort and close > emaValue)
    exitNow = false
    exitReason = ""  // 先声明并初始化

    // 止损止盈
    if useStoploss
        stopDistance = ta.atr(14) * 1.5
        if isLong
            stopLevel = lastEntryPrice - stopDistance
            profitLevel = lastEntryPrice + (stopDistance * riskRewardRatio)
            if close <= stopLevel
                strategy.close("Long")
                exitNow := true
                exitReason := "止损"
            else if close >= profitLevel
                strategy.close("Long")
                exitNow := true
                exitReason := "止盈"
        else if isShort
            stopLevel = lastEntryPrice + stopDistance
            profitLevel = lastEntryPrice - (stopDistance * riskRewardRatio)
            if close >= stopLevel
                strategy.close("Short")
                exitNow := true
                exitReason := "止损"
            else if close <= profitLevel
                strategy.close("Short")
                exitNow := true
                exitReason := "止盈"
    // EMA出场或时间出场
    if emaExit or holdTimeExceeded or barsHeld >= maxTradeDuration
        strategy.close_all()
        exitReason := holdTimeExceeded ? "时间出场" : (emaExit ? "EMA出场" : "最大K线数")
        exitNow := true
    if exitNow
        label.new(bar_index, close, "平仓:" + (isLong ? "多" : "空") + "\n" + str.tostring(close, format.mintick) + "\n" + exitReason + "\ntradesToday=" + str.tostring(tradesToday) + "\ncurDay=" + str.tostring(curDay), color=color.yellow, style=label.style_label_left, textcolor=color.black, size=size.normal)

// 每天重置时加调试label
if na(lastTradeDay) or curDay != lastTradeDay
    label.new(bar_index, high, "新的一天\ntradesToday重置", color=color.blue, textcolor=color.white, size=size.tiny)

// 绘制FVG区域
if showFvgBoxes and array.size(fvgHistory) > 0
    for i = 0 to array.size(fvgHistory) - 1
        fvg = array.get(fvgHistory, i)
        if fvg.fvgTime <= time  // 只绘制过去和当前的FVG
            fvgTime = fvg.fvgTime
            fvgLow = fvg.fvgLow
            fvgHigh = fvg.fvgHigh
            isBull = fvg.isBull
            traded = fvg.traded
            endTime = time // 只画到当前K线
            boxColor = isBull ? color.new(#089981, traded ? 40 : 80) : color.new(#f23645, traded ? 40 : 80)
            borderColor = isBull ? #089981 : #f23645
            box.new(fvgTime, fvgHigh, endTime, fvgLow, bgcolor=boxColor, border_color=borderColor, border_width=traded ? 1 : 2, xloc=xloc.bar_time)
            labelText = fvg.tf + (traded ? " (已交易)" : "")
            label.new(fvgTime, isBull ? fvgLow : fvgHigh, labelText, color=boxColor, textcolor=color.white, style=isBull ? label.style_label_up : label.style_label_down, yloc=yloc.price, xloc=xloc.bar_time)

// 清除过期FVG（保留最近20个）
if array.size(fvgHistory) > 20
    for i = 0 to array.size(fvgHistory) - 1
        fvg = array.get(fvgHistory, i)
        if fvg.traded
            array.remove(fvgHistory, i)
            break